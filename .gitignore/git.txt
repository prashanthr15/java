


to create a git local repository
git init ->it will create a local repository in projrct
PS C:\prashanth\ruchitha\java practice> git init 
Initialized empty Git repository in C:/prashanth/ruchitha/java practice/.git/

git status -> will show that the code is modified
PS C:\prashanth\ruchitha\java practice> git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        A.class
        Area.class
        Area.java
       

nothing added to commit but untracked files present (use "git add" to track)

to change branch name default is "master" to "main" while git initialize use -> git init -b main
-b is branch
C:\prashanth\ruchitha\java practice>git init -b main
Initialized empty Git repository in C:/prashanth/ruchitha/java practice/.git/


git status will give  the status of the git project

C:\prashanth\ruchitha\java practice>git status
On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        A.class
        Area.class
        Area.java
       

nothing added to commit but untracked files present (use "git add" to track)



imagine git commit is like saving somthing

to add filr to the staging
(use "git add <file>..." to include in what will be committed)
git add Area.java

now it added to the staging area



C:\prashanth\ruchitha\java practice>git add Area.java

C:\prashanth\ruchitha\java practice>git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   Area.java

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        A.class
        Area.class
       

to unstage it 
(use "git rm --cached <file>..." to unstage)
        new file:   Area.java


git log to see all the commits


C:\prashanth\ruchitha\java practice>git log
fatal: your current branch 'main' does not have any commits yet

to commit the the file use git commit


C:\prashanth\ruchitha\java practice>git commit
hint: Waiting for your editor to close the file... unix2dos: converting file C:/prashanth/ruchitha/java practice/.git/COMMIT_EDITMSG to DOS format...
dos2unix: converting file C:/prashanth/ruchitha/java practice/.git/COMMIT_EDITMSG to Unix format...
Aborting commit due to empty commit message.

Aborting commit due to empty commit message. we should give a message what feauters are added or bug fixes or issue tracking like ticket number  there

git commit -m "my first commit"
C:\prashanth\ruchitha\java practice>git commit -m "my first commit"  
[main (root-commit) e963d77] my first commit
 1 file changed, 16 insertions(+)
 create mode 100644 Area.java


C:\prashanth\ruchitha\java practice>git commit -m "my first commit"  
[main (root-commit) e963d77] my first commit
 1 file changed, 16 insertions(+)
 create mode 100644 Area.java

C:\prashanth\ruchitha\java practice>git status  
On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)      
        A.class
        Area.class
        

nothing added to commit but untracked files present (use "git add" to track)

how git will track the every commit using check sum this check sum number ([main (root-commit) e963d77]) always changes for every commit

e963d77->tis is 40 characters but shows 7 chars in hexa decimal form

git log 

C:\prashanth\ruchitha\java practice>git log
commit e963d779269a6d4fae34ead3e582ad95eb8edee8 (HEAD -> main)
Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
Date:   Wed Jan 24 21:17:29 2024 -0600

    my first commit


working directory  ->  staging area (index)[Area.java]->commit history(objects)[first code]


to commit first file should be in stageing 

C:\prashanth\ruchitha\java practice>git commit -m "second commit" 
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Area.java

Untracked files:
  (use "git add <file>..." to include in what will be committed)      
        A.class
        Area.class
        B.class
        Calculation.class
        Calculation.java
        Demo.class
        Demo.java
        Demoo.class
        Demoo.java
        Fibonacci1.class
        Fibonacci1.java
        Sample.java
        Sample1
        Sample1.class
        Sample1.java
        Sample2.class
        Sample2.java
        sample.class

no changes added to commit (use "git add" and/or "git commit -a")     




C:\prashanth\ruchitha\java practice>git add Area.java

C:\prashanth\ruchitha\java practice>git commit -m "my second commit" 
[main 91a4741] my second commit
 1 file changed, 1 insertion(+)

C:\prashanth\ruchitha\java practice>git status
On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        A.class
        Area.class
        B.class
        Calculation.class
        Calculation.java
        Demo.class
        Demo.java
        Demoo.class
        Demoo.java
        Fibonacci1.class
        Fibonacci1.java
        Sample.java
        Sample1
        Sample1.class
        Sample1.java
        Sample2.class
        Sample2.java
        sample.class

nothing added to commit but untracked files present (use "git add" to track)

C:\prashanth\ruchitha\java practice>git log
commit 91a47410444cadfe9b14fb53449aece51e64acde (HEAD -> main)
Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
Date:   Wed Jan 24 21:33:28 2024 -0600

    my second commit

commit e963d779269a6d4fae34ead3e582ad95eb8edee8
Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
Date:   Wed Jan 24 21:17:29 2024 -0600

    my first commit


consider as of now (HEAD -> main) is pointer

to skip the staging use -a ->means option
-m ->means message

git diff -> when the code is in working directory
shows excatly what code is midified means differnece between the old code and new code
git diff --staged
should be used when the code is staged

C:\prashanth\ruchitha\java practice>git diff
diff --git a/Area.java b/Area.java
index 9a8355e..3889576 100644
--- a/Area.java
+++ b/Area.java
@@ -3,6 +3,7 @@ import java.util.Scanner;
 public class Area {
     public static void main(String[] args) {
         // int a,b,c;
+        // test for git
         int a,b,c;
         double s,area;
         Scanner scan=new Scanner(System.in);
:

git commit -a -m "my third commit"


all commands used till, now learned

C:\prashanth\ruchitha\java practice>git diff
diff --git a/Area.java b/Area.java
index 9a8355e..3889576 100644
--- a/Area.java
+++ b/Area.java
@@ -3,6 +3,7 @@ import java.util.Scanner;
 public class Area { 
     public static void main(String[] args) {
         // int a,b,c;
+        // test for git
         int a,b,c;
         double s,area;
         Scanner scan=new Scanner(System.in);

C:\prashanth\ruchitha\java practice>git add Area.java

C:\prashanth\ruchitha\java practice>git commit -m "third commit" 
[main 3cba9a5] third commit
 1 file changed, 1 insertion(+)

C:\prashanth\ruchitha\java practice>git log
commit 3cba9a5bcfc4c538ce8240a78da6f15a105d4e91 (HEAD -> main)
Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
Date:   Thu Jan 25 09:44:56 2024 -0600

    third commit

commit 91a47410444cadfe9b14fb53449aece51e64acde
Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
Date:   Wed Jan 24 21:33:28 2024 -0600

    my second commit

commit e963d779269a6d4fae34ead3e582ad95eb8edee8
Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
Date:   Wed Jan 24 21:17:29 2024 -0600

    my first commit

C:\prashanth\ruchitha\java practice>gt status
'gt' is not recognized as an internal or external command,
operable program or batch file.

C:\prashanth\ruchitha\java practice>git status
On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        A.class
        Area.class
        B.class
        Calculation.class
        Calculation.java
        Demo.class
        Demo.java
        Demoo.class
        Demoo.java
        Fibonacci1.class
        Fibonacci1.java
        Sample.java
        Sample1
        Sample1.class
        Sample1.java
        Sample2.class
        Sample2.java
        sample.class

nothing added to commit but untracked files present (use "git add" to track)

C:\prashanth\ruchitha\java practice>



git remove file
================
git rm --cached creds.txt(filename)

C:\prashanth\ruchitha\java practice>git rm --cached cr
eds.txt
rm 'creds.txt'


C:\prashanth\ruchitha\java practice>git status
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)   
        deleted:    creds.txt



git clone
=========
is to copy

git clone https://github.com/Aakashdeveloper/Angular5-Seed.git




remote git hub
===============
create a remote repository

get the git hub account
https://github.com/

         |
       create new repository
         |
         
Owner / Repository name(git-course)

          |
description
        |

Public
Anyone on the internet can see this repository. You choose who can commit.

Private
You choose who can see and commit to this repository.

          |

Initialize this repository with:

Add a README file
This is where you can write a long description for your project. Learn more about READMEs.
          |

Add .gitignore
Choose which files not to track from a list of templates. Learn more about ignoring files.
           |
Choose a license
A license tells others what they can and can't do with your code. Learn more about licenses.

          |
create repository


https every time it ask login 
|or
ssh one time ssh key generate checks it by default not need to login always like https 



to push the code from local repository to remote repository
=============================================================

create a folder in local repository using  cmd
git-course

   |
creating a reademe.md file 
|
echo this  particular message(this is the data we have write git-course) to the readme.md file(creating the file with data)
echo "# this is the data we have write git-course" >> README.md(file)

|
dir =>to see the files in directory
C:\Users\prash\git-course>echo "# this is the data we have write git-course" >> README.md

C:\Users\prash\git-course>dir
 Volume in drive C is OS
 Volume Serial Number is 9827-8DA8

 Directory of C:\Users\prash\git-course

01/25/2024  10:35 AM    <DIR>          .
01/25/2024  10:24 AM    <DIR>          ..
01/25/2024  10:35 AM                48 README.md
               1 File(s)             48 bytes
               2 Dir(s)  393,760,112,640 bytes free

   |
to see the content in file use "type readme.md"

C:\Users\prash\git-course>type readme.md
"# this is the data we have write git-course"
|
ctreate a local git using git init
C:\Users\prash\git-course>git init
Initialized empty Git repository in C:/Users/prash/git-course/.git/
|
to see the hidden files
C:\Users\prash\git-course>dir /a
|
to stage use
git add README.md
|
git commit -m "1 the readme file is commited "
|
the code is commit to local repository
|
creating a branch by default its "master" to change use 
git branch -M main
|
now push file from the local repository to remote repository
|
its time to connect to remote  repositiory
|

to generate a ssh key use
ssh-keygen -o 
for one machine should do only once not all time when we commit liks httpsS
|
this the way to communicate between  the local and remote repos

C:\Users\prash\git-course>ssh-keygen -o
Generating public/private rsa key pair.
Enter file in which to save the key (C:\Users\prash/.ssh/id_rsa):
press enter to take the default one
Created directory 'C:\\Users\\prash/.ssh'.
|
passphrase passphrase again press enter it  uses default one(passphrase like password)
|
passphrase again press enter it  uses default one(passphrase like password)
|
C:\Users\prash\git-course>ssh-keygen -o
Generating public/private rsa key pair.
Enter file in which to save the key (C:\Users\prash/.ssh/id_rsa):
Created directory 'C:\\Users\\prash/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in C:\Users\prash/.ssh/id_rsa
Your public key has been saved in C:\Users\prash/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:U0EvvTO7UD2A/bIDiHpomx74uEqLybTnOp0nCzqDtIo prash@prashanthreddy
The key's randomart image is:

|
to find the ssh key go back to C:\Users\prash
C:\Users\prash\git-course cd ..
C:\Users\prash
C:\Users\prash>dir
01/25/2024  10:57 AM    <DIR>          .ssh
C:\Users\prash>cd .ssh
C:\Users\prash\.ssh>dir /a
01/25/2024  10:57 AM             2,610 id_rsa
01/25/2024  10:57 AM               575 id_rsa.pub
C:\Users\prash\.ssh> type id_rsa.pub
after this it shows the ssh key
|
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCoR8XemHNfJ/FJ9t0kOf8RhWRgQAgGXe81l0ZthfxHFS7pWHtFzjqPi6R//NLRyNP4EG9+vl4irtwJ6TMoW6OnIYSRrdeqrbxSGhUA5F/eebATH8Hc3COQXx4uXOHC9an6WI/d5jnwtdsl3afRzD+CHLpojwmdnpUf9L+iUITsyccIQRNSMh8c4tMv3knap1KwcyVrXis7laB18F82TYWziBmKqdrotKQdI0e3R4XAmrTu6qpqdWIGqG5DsTx5eN/CUN5Z89m1VQfkHEy5a6nMOKjegSXR/5Hq96Qf+VFmwKj7K5PkeQtV1RjNwnDPLpJIamIqQiH7A3DNML5oQfdjqCSAHLX1WHnp8jlt8N8zu5/XezNx++lBUGMzrZmubllrlDS3ycaZ6sSiTQ3f8UBTmdsdg83ei2XkeBLujZqd/3ArlvwVgg7FTJR9dzt0oDKjjVxce3DzdZvJyoWEszOVO0ZCwcU5yr20wv4UCw2fBcpD74La9H0pnu958THYmsU= prash@prashanthreddy

|


example in practicle for above commands
=======================================
C:\Users\prash\git-course>cd ..

C:\Users\prash>dir
 Volume in drive C is OS
 Volume Serial Number is 9827-8DA8

 Directory of C:\Users\prash

01/25/2024  10:56 AM    <DIR>          .
11/21/2022  10:58 AM    <DIR>          ..
01/25/2023  03:42 PM    <DIR>          .cache
01/21/2024  02:34 PM    <DIR>          .eclipse
01/24/2024  08:28 PM                69 .gitconfig
01/11/2024  04:49 PM    <DIR>          .lemminx
01/25/2024  09:45 AM                20 .lesshst
01/11/2024  03:54 PM    <DIR>          .m2
01/24/2024  03:48 PM    <DIR>          .p2
01/25/2024  10:57 AM    <DIR>          .ssh
09/11/2023  12:08 PM    <DIR>          .vscode
11/22/2022  07:33 AM    <DIR>          Contacts
07/08/2022  10:36 AM    <DIR>          Documents
01/24/2024  08:10 PM    <DIR>          Downloads
01/19/2024  03:08 PM    <DIR>          eclipse-workspace
11/22/2022  07:33 AM    <DIR>          Favorites
01/25/2024  10:40 AM    <DIR>          git-course
11/22/2022  07:33 AM    <DIR>          Links
11/22/2022  07:33 AM    <DIR>          Music
01/25/2024  09:21 AM    <DIR>          OneDrive
11/22/2022  07:33 AM    <DIR>          Saved Games
11/22/2022  07:33 AM    <DIR>          Searches
11/22/2022  07:33 AM    <DIR>          Videos
               2 File(s)             89 bytes
              21 Dir(s)  393,752,653,824 bytes free

C:\Users\prash>cd .ssh

C:\Users\prash\.ssh>dir /a
 Volume in drive C is OS
 Volume Serial Number is 9827-8DA8

 Directory of C:\Users\prash\.ssh

01/25/2024  10:57 AM    <DIR>          .
01/25/2024  10:56 AM    <DIR>          ..
01/25/2024  10:57 AM             2,610 id_rsa
01/25/2024  10:57 AM               575 id_rsa.pub
               2 File(s)          3,185 bytes
               2 Dir(s)  393,752,420,352 bytes free

C:\Users\prash\.ssh> type id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCoR8XemHNfJ/FJ9t0kOf8RhWRgQAgGXe81l0ZthfxHFS7pWHtFzjqPi6R//NLRyNP4EG9+vl4irtwJ6TMoW6OnIYSRrdeqrbxSGhUA5F/eebATH8Hc3COQXx4uXOHC9an6WI/d5jnwtdsl3afRzD+CHLpojwmdnpUf9L+iUITsyccIQRNSMh8c4tMv3knap1KwcyVrXis7laB18F82TYWziBmKqdrotKQdI0e3R4XAmrTu6qpqdWIGqG5DsTx5eN/CUN5Z89m1VQfkHEy5a6nMOKjegSXR/5Hq96Qf+VFmwKj7K5PkeQtV1RjNwnDPLpJIamIqQiH7A3DNML5oQfdjqCSAHLX1WHnp8jlt8N8zu5/XezNx++lBUGMzrZmubllrlDS3ycaZ6sSiTQ3f8UBTmdsdg83ei2XkeBLujZqd/3ArlvwVgg7FTJR9dzt0oDKjjVxce3DzdZvJyoWEszOVO0ZCwcU5yr20wv4UCw2fBcpD74La9H0pnu958THYmsU= prash@prashanthreddy

C:\Users\prash\.ssh>


|
copy the entire key 

and  got to githun.com
|
right side cornor click on profile dp click on ctrl +settings so it opens new page
|
left side there an option 
ssh and gpg keys click on it
|

right side click on new ssh key
|
title
git course 1(any name)
|
key 
paste the copied key from 
id_rsa.pub
|
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCoR8XemHNfJ/FJ9t0kOf8RhWRgQAgGXe81l0ZthfxHFS7pWHtFzjqPi6R//NLRyNP4EG9+vl4irtwJ6TMoW6OnIYSRrdeqrbxSGhUA5F/eebATH8Hc3COQXx4uXOHC9an6WI/d5jnwtdsl3afRzD+CHLpojwmdnpUf9L+iUITsyccIQRNSMh8c4tMv3knap1KwcyVrXis7laB18F82TYWziBmKqdrotKQdI0e3R4XAmrTu6qpqdWIGqG5DsTx5eN/CUN5Z89m1VQfkHEy5a6nMOKjegSXR/5Hq96Qf+VFmwKj7K5PkeQtV1RjNwnDPLpJIamIqQiH7A3DNML5oQfdjqCSAHLX1WHnp8jlt8N8zu5/XezNx++lBUGMzrZmubllrlDS3ycaZ6sSiTQ3f8UBTmdsdg83ei2XkeBLujZqd/3ArlvwVgg7FTJR9dzt0oDKjjVxce3DzdZvJyoWEszOVO0ZCwcU5yr20wv4UCw2fBcpD74La9H0pnu958THYmsU= prash@prashanthreddy
|
its connected not continuosly 
|
when ever we push it verifies this keys local and remote are same



go back to cmd
===============
C:\Users\prash\.ssh>cd ..

C:\Users\prash>cd git-course

C:\Users\prash\git-course>
C:\Users\prash\git-course>dir
to check files are there
|
01/25/2024  10:35 AM                48 README.md
|
before all this we are done with 
echo "# git-course" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
until here
|
to cretae connection between local and remmote use ssh one
===========================================================
git remote add origin git@github.com:prashanthr15/git-course.git
|
to push the code from local to remote use
git push -u origin main
-u is the upstream
"main" is the branch
|
asks for the key
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
press yes and enter
|
now code is pushed to github




example of code commands practical
==================================

C:\Users\prash\git-course>git remote add origin git@github.com:prashanthr15/git-course.git

C:\Users\prash\git-course>git push -u origin main
The authenticity of host 'github.com (140.82.114.4)' can't be established.
ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'github.com' (ED25519) to the list of known hosts.
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 270 bytes | 270.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:prashanthr15/git-course.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.


cd to see the path
======================

adding additioonal files to git-course
created file userservice in  working directory
|
check wheather is initialized by using git status
|
stage the file from working directory 
git add userseervice.txt (staged)
git commit -M "created the userservice.txt" (commited to local repo)
git push origin main (pushed to remote repo)
origin => represents the url
main => branch


git TAG
===========
tag like version names of project release

to create a tag
git tag v1.0 -m "27th june release"

to check the tags
git tag

to push it to remote 
git push origin v1.0

to search for a tag 
give specific version name
git show 1.79.0

practical ex:
=============
PS C:\Users\prash\git-course> git tag v1.0 -m "27th june release"
PS C:\Users\prash\git-course> git tag
v1.0
PS C:\Users\prash\git-course> git push origin v1.0
Enumerating objects: 1, done.
Counting objects: 100% (1/1), done.
Writing objects: 100% (1/1), 170 bytes | 170.00 KiB/s, done.
Total 1 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:prashanthr15/git-course.git
 * [new tag]         v1.0 -> v1.0
PS C:\Users\prash\git-course> git tag v1.1 -m "25th jan release 2023  release"
PS C:\Users\prash\git-course> git tag
v1.0
v1.1
PS C:\Users\prash\git-course> git push origin v1.1
Enumerating objects: 1, done.
Counting objects: 100% (1/1), done.
Writing objects: 100% (1/1), 174 bytes | 174.00 KiB/s, done.
Total 1 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:prashanthr15/git-course.git
 * [new tag]         v1.1 -> v1.1
PS C:\Users\prash\git-course> 


git clone
=========
git clone url which one to clone
will see the committs and message there
commits  : messages
git log --pretty=oneline

C:\Users\prash\git-course>git log --pretty=oneline
367ccdd3d5d61ed10e5ce6dab75a18ca470599dd (HEAD -> main, tag: v1.1, tag: v1.0, origin/main) user service created
b971bf34bf513168fe9d993ae013d729c38ffad1 1 read me file is commit


git remote -v
we should know what they use 
here they they use "origin"
C:\Users\prash\git-course>git remote -v
origin  git@github.com:prashanthr15/git-course.git (fetch)
origin  git@github.com:prashanthr15/git-course.git (push)

git branch
===========
git checkout -b(--branch)(old)
git switch -c(--create)  (new)
both are same, meaning is switch b/w the branches
|
for the first time to create branch
git checkout -b feature1(branch name)
-b =>branch
git switch -c
-c => create
|
to check how many branches are there
git branch

C:\Users\prash\git-course>git branch
* main
*=> means pointer
|
C:\Users\prash\git-course>git checkout -b feature1
Switched to a new branch 'feature1'

C:\Users\prash\git-course>git branch
* feature1
  main
now, currently in feature1 branch



practical ex:
PS C:\Users\prash\git-course> git checkout main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
PS C:\Users\prash\git-course> git switch feature1
Switched to branch 'feature1'
PS C:\Users\prash\git-course> git switch main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
PS C:\Users\prash\git-course> 



git branch =>gives all the local branches
git branch => gives all local and remote branches 
to switch ewtween the branches 
git checkout main
git switch feature1
 feature1
* feature2
  main
|
gti switch -
it goes back to feature1 because it came from feature 1 to feature2

practical ex;

PS C:\Users\prash\git-course> git switch -c feature2
Switched to a new branch 'feature2'
PS C:\Users\prash\git-course> git branch
  feature1
* feature2
  main
PS C:\Users\prash\git-course> git branch --all
  feature1
* feature2
  main
  remotes/origin/main
PS C:\Users\prash\git-course> 


to delete branch
===============

git branch -d feature2
-d delete
--delete
PS C:\Users\prash\git-course> git branch -d feature2
Deleted branch feature2 (was 367ccdd).

push to github remote repository
==============================
git push origin feature1



git branch how it works
=========================


git merge
==========
first we should be in a main branch to merge two branches
git merge feature1
it merge in local repo

before merging we have to pull the codefrom github
git pull origin main

after merge using git merge feature1
git push origin main


PS C:\Users\prash\git-course> git switch main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
PS C:\Users\prash\git-course> git branch     
  feature1
* main
PS C:\Users\prash\git-course> git merge feature1
Updating 367ccdd..2873b9a
Fast-forward
 UserService.txt | 6 +++++-
 admin.txt       | 2 ++
 2 files changed, 7 insertions(+), 1 deletion(-)
 create mode 100644 admin.txt
PS C:\Users\prash\git-course> git status
On branch main
Your branch is ahead of 'origin/main' by 2 commits.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
PS C:\Users\prash\git-course> git push origin main
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:prashanthr15/git-course.git
   367ccdd..2873b9a  main -> main
PS C:\Users\prash\git-course>


=====================================
note:
to exit from git loop=Q and enter
=======================================


git log --graph => it shows the graph in cmd
rebase
======
to merge two branches either use merge or rebase
differnce is merge spilts in to branches  |/
rebase as straight |

================
this is merged see 2 dotted lines spilted

PS C:\Users\prash\git-course> git log --graph
*   commit 303fd54ffa1f417898d86180ba063b96b8f8e335 (HEAD -> main)
|\  Merge: 6ec9c2e 25fd4d7
| | Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| | Date:   Thu Jan 25 15:17:41 2024 -0600
| | 
| |     Merge branch 'feature2'
| | 
| * commit 25fd4d72179b43418ed6ba6f6c8f3b44a8fabd94 (feature2)
| | Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| | Date:   Thu Jan 25 15:12:27 2024 -0600
| | 
| |     changed admin services1
| | 
| * commit c0523dbea9c0e1b2d6ff90e02e043c0548ef6d8c
| | Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| | Date:   Thu Jan 25 15:10:58 2024 -0600
| | 
| |     changed admin services
| | 
* | commit 6ec9c2ee78423b62463b3c777d426261013a60cf
|/  Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
|   Date:   Thu Jan 25 15:16:06 2024 -0600
|   
|       login and logout feature added
| 
* commit 2873b9a689bac04220167981eb3936ab445a270a (origin/main, origin/feature1, feature1)
| Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| Date:   Thu Jan 25 13:37:08 2024 -0600
|
|     adding admin file
|
* commit f3403eacf7a1e99ffd5f928a0e5d5931e2c56572
:

Rebase
========
PS C:\Users\prash\git-course> git rebase feature3
Successfully rebased and updated refs/heads/main.
PS C:\Users\prash\git-course> git log --graph
* commit 1bcfc9ef8ebb11abe9b9e53c1b4f9795ee82ea93 (HEAD -> main)      
| Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| Date:   Thu Jan 25 15:23:54 2024 -0600
|
|     change 3 is added
|
* commit 268dc6e9810fd7383439b496ba33f59cd3292f4b (feature3)
| Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| Date:   Thu Jan 25 15:21:15 2024 -0600
|
|     changes added 1 and 2
|
*   commit 303fd54ffa1f417898d86180ba063b96b8f8e335
|\  Merge: 6ec9c2e 25fd4d7
| | Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| | Date:   Thu Jan 25 15:17:41 2024 -0600
| | 
| |     Merge branch 'feature2'
| | 
| * commit 25fd4d72179b43418ed6ba6f6c8f3b44a8fabd94 (feature2)
| | Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| | Date:   Thu Jan 25 15:12:27 2024 -0600
| | 
| |     changed admin services1
| | 
| * commit c0523dbea9c0e1b2d6ff90e02e043c0548ef6d8c
| | Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| | Date:   Thu Jan 25 15:10:58 2024 -0600
| | 
| |     changed admin services
| | 
* | commit 6ec9c2ee78423b62463b3c777d426261013a60cf
:

PS C:\Users\prash\git-course> git log --graph
* commit 2873b9a689bac04220167981eb3936ab445a270a (HEAD -> main, origin/main, origin/feature1, feature1)
| Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| Date:   Thu Jan 25 13:37:08 2024 -0600
|
|     adding admin file
|
* commit f3403eacf7a1e99ffd5f928a0e5d5931e2c56572
| Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| Date:   Thu Jan 25 13:14:41 2024 -0600
|
|     experimenting with usser avater
|
* commit 367ccdd3d5d61ed10e5ce6dab75a18ca470599dd (tag: v1.1, tag: v1.0)
| Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
| Date:   Thu Jan 25 11:57:56 2024 -0600
|
|     user service created
|
* commit b971bf34bf513168fe9d993ae013d729c38ffad1
  Author: prashanthr15 <prashanthreddy.gopidi@gmail.com>
  Date:   Thu Jan 25 10:48:03 2024 -0600



merge conflict
================
in two branches with different committs on same file same line we have done any changes then there is a merge conflict

merge conflict 
==============
merge conflic in remote repo file and local file while commiting local file to remote
-it comes when we push the local file to remote because of same file same line add same data 
|
PS C:\Users\prash\git-course> git add .
PS C:\Users\prash\git-course> git commit -m "creating a conflict b/w remote file and local file"
[main 60e15e1] creating a conflict b/w remote file and local file
 1 file changed, 1 insertion(+), 1 deletion(-)
PS C:\Users\prash\git-course> git push origin main
To github.com:prashanthr15/git-course.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'github.com:prashanthr15/git-course.git'


hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
PS C:\Users\prash\git-course>

||
git pull origin main
Auto-merging admin.txt
CONFLICT (content): Merge conflict in admin.txt
Automatic merge failed; fix conflicts and then commit the result.
|
admin.txt

this is the merge conflict
this will not occur if we first pull from github 
and later we modify our code code and push it back

<<<<<<< HEAD
closing the oracle database connection
=======
closing the mysql database connection
>>>>>>> 4dc8afa5410223349bce28c2cdb6e8bab572127c




|
in conflict it shows the file where conflicts are pressent with
 >>>>>>>>>head (current)
<<<<<<<<<<<< incoming

decide which one to go for and stage it, commit


when you change remote repository  from local one we call push
================================================================


how you get the changes from remote to local
by using "pull"
git pull origin main


git time travel
==================
to go back to the previous commits using checksum (hexadecimal 40 chars number)
git checkout fcbb69c288c1eae67f586a155e35bee40c4b4e46


PS C:\Users\prash\git-course> git checkout fcbb69c288c1eae67f586a155e35bee40c4b4e46
Note: switching to 'fcbb69c288c1eae67f586a155e35bee40c4b4e46'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.   

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:    

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at fcbb69c cleared the conflict between the feature3 and main
PS C:\Users\prash\git-course> 


PS C:\Users\prash\git-course> git branch
* (HEAD detached at fcbb69c)
  feature1
  feature2
  feature3
  main

do not disturb any branch we create a new branch
git checkout -b lite-version
or
git switch -c lite-version
|
PS C:\Users\prash\git-course> git switch -c lite-version
Switched to a new branch 'lite-version'
PS C:\Users\prash\git-course> git branch
  feature1
  feature2
  feature3
* lite-version
  main


git stash
===========
means we want to save the code with out commiting 

git stash list;
will give allthe stash list
git stash apply 
this will add previous incomplete code 

when we work in one branch (feature1)and without commiting this code 
we want to use the another branch .
we can use git stash means we want to save the code with out commiting 

PS C:\Users\prash\git-course> git switch feature1
Switched to branch 'feature1'
PS C:\Users\prash\git-course> git switch main
error: Your local changes to the following files would be overwritten by checkout:
        UserService.txt
Please commit your changes or stash them before you switch branches.
Aborting
PS C:\Users\prash\git-course> git stash
Saved working directory and index state WIP on feature1: 2873b9a adding admin file


git fork
=========
when you clone some one project you can edit but you cant push your chnages because your are nnot a contributer also we we dont have a license

then insated of clone use fork the project
|
click on fork
|

when we fork it the entire repository will available in my repository
like all my repository i can pull or push 

git pull request
====================

first fork the project n
|
copied ssh
|
git clone url
select the folder where you want to download 

C:\Users\prash\git-course>git clone git@github.com:prashanthr15/quiz-app-spring.git
Cloning into 'quiz-app-spring'...
remote: Enumerating objects: 50, done.
remote: Counting objects: 100% (50/50), done.
remote: Compressing objects: 100% (34/34), done.
Receiving objects: 100% (50/50), 67.83 KiB | 3.08 MiB/s, done.

Resolving deltas: 100% (5/5), done.

after download
|
===================================================
note:to open vscode from cmd use
goto the folder which one you want to openin vscode
C:\Users\prash\fork>code .
======================================================
|
C:\Users\prash\fork>dir

01/25/2024  05:33 PM    <DIR>          .
01/25/2024  05:32 PM    <DIR>          ..
01/25/2024  05:35 PM    <DIR>          quiz-app-spring
               0 File(s)              0 bytes
               3 Dir(s)  391,612,518,400 bytes free

|
C:\Users\prash\fork>cd  quiz-app-spring
in vscode editor make some changes in code in working directory
|

C:\Users\prash\fork\quiz-app-spring>git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   src/main/java/com/telusko/quizapp/controller/QuizController.java

no changes added to commit (use "git add" and/or "git commit -a")

C:\Users\prash\fork\quiz-app-spring>git add .

C:\Users\prash\fork\quiz-app-spring>git commit -m "added line 15 in QuizController.java"
[main 650c505] added line 15 in QuizController.java
 1 file changed, 2 insertions(+), 1 deletion(-)

C:\Users\prash\fork\quiz-app-spring>git push origin main
Enumerating objects: 19, done.
Counting objects: 100% (19/19), done.
Delta compression using up to 12 threads
Compressing objects: 100% (7/7), done.
Writing objects: 100% (10/10), 727 bytes | 727.00 KiB/s, done.
Total 10 (delta 4), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (4/4), completed with 4 local objects.
To github.com:prashanthr15/quiz-app-spring.git
   779f215..650c505  main -> main

C:\Users\prash\fork\quiz-app-spring>


this will change in our repository because we fork it in to our repo

|
if we want to make change in main account create pullrequests
base repository navin (forked from)-->head repo prashanth
|
no merge conflicts 
|
create pull request
|
naveen 
will get a pull request from prashanth
|
naveen will review the code
|
naveen thinks its important he will merge the code 
if he feels not important he deny it
|
after mergeing pull request is closed
|
now it updated in base naveen branch
